
def update_opinion(x, y, mu):

    """Rule to use to update the opinions."""

    

    xpost = x + mu * (y - x)

    ypost = y + mu * (x - y)

    

    return xpost, ypost

x = 0.3

y = 0.6

mu = 0.49

xpost, ypost = update_opinion(x, y, mu)

​

print("xpost:", xpost)

print("ypost:", ypost)

def bounded_update_opinion(x, y, mu, c):

    """Rule to use to update the opinions."""

    

    # TODO to modify.

    xpost, ypost = update_opinion(x, y, mu)

    return xpost, ypost

mu=0.4

x=0.3

y=0.6

c=0.4

if abs(x-y)<c: 

    xpost, ypost = bounded_update_opinion(x, y, mu, c)

​

print("xpost:", xpost)

print("ypost:", ypost)

# Global parameters

nb_steps = 31

N  = 5       # number of individuals

mu = 0.5      # convergence parameter

c  = 0.2      # threshold

import numpy as np

import matplotlib.pyplot as plt

def init_system():

    """Initialize the opinions of the individuals."""

    

    state = np.random.uniform(low=0.0, high=1.0, size=N)

    

    return state

state = init_system()

print("state:", state)

print("state[0]:", state[0])

def sample_pair_agents():

    """Sample a pair of distinct consecutive agents uniformly."""

    

    x = np.random.choice(N)

    i = x % N

    j = (x + 1) % N

​

    return i, j

print("(i, j):", sample_pair_agents())

def next_step(state, verbose=False):

    """Simulate the transition from one state to following one."""

​

    i, j = sample_pair_agents()

#     next_state = state.copy()

    state[i], state[j] = bounded_update_opinion(state[i], state[j], mu, c)

    if verbose:

        print("Agents", i, "and", j, "met.")

​

    return state

print(next_step(state, verbose=True))

def simulate(verbose=False):

    """Simulate multiple transitions."""

    

    results =[]

    new_state = init_system()

    for i in range(nb_steps):

        new_state = next_step(new_state)

        if verbose:

            print(i, new_state)

        results.append(new_state.copy())

    

    return results

simulate(verbose=True)

results=simulate(verbose=True)

for i in range(nb_steps):

    x = i * np.ones(N)

    y = results[i]

    plt.scatter(x, y, s=2, c='C0')

    plt.xlabel("Iteration")

    plt.ylabel("Opinion")

import numpy as np

import matplotlib.pyplot as plt

import matplotlib.animation as animation

results = []

​

cells1 = np.array([[0,1,0.2,0.3,1,0],

                  [0.1,0.5,0.3,1,0.5,0.4],

                  [0.8,1,0.5,1,0.4,0.5],

                  [0.8,0.7,1,1,0.2,0.6],              

                  [1,0,0.5,0.4,0.3,0.5],              

                  [0.9,1,0,0,0.4,0]]) 

​

results.append(cells1)

​

def compute_neighbours(cells):    

    rows, cols = len(cells), len(cells[0])    

    count  = np.zeros([rows, cols], int)    

    for x in range(1,cols-1):        

        for y in range(1,rows-1):            

            count[y][x] = cells[y-1][x-1]+cells[y][x-1]+cells[y+1][x-1] \

            + cells[y-1][x]              +cells[y+1][x]   \

            + cells[y-1][x+1]+cells[y][x+1]+cells[y+1][x+1]    

    return count  

        

def iterate(cells):    

    rows,cols = len(cells), len(cells[0])    

    N = compute_neighbours(cells)    

    for x in range(1,cols-1):        

        for y in range(1,rows-1):            

            if cells[y][x] == 1 and (N[y][x] < 2 or N[y][x] > 3):                

                cells[y][x] = 0            

            elif cells[y][x] == 0 and N[y][x] == 3:                

                cells[y][x] = 1    

    cells1 = cells

    return cells1

​

for i in range(10):

    results.append(iterate(cells1))

list=results

from IPython.display import HTML

fig = plt.figure()

# results[i] contient l'état au pas de temps i sous forme de matrice

im = plt.imshow(results[0],cmap="gist_yarg" ,animated=True)

​

#def updatefig(i):

 #   im.set_array(results[i+1])

  #  return im,

​

#ani= animation.FuncAnimation(fig, updatefig, frames=1000, interval=50, blit=True)

#HTML(ani.to_html5_video())

print(results[2])

# Pour sauvegarder la vidéo dans un fichier externe

#ani.save('test.mp4', fps=30, extra_args=['-vcodec', 'libx264'])

​

list=cells1

print(list)

m=mean(results)

print(m)

figure()

abs = np.linspace(0.1,0.5,5)

for i in abs:

    x = i 

    y = mean(results)

plot(x, y, 'm')

x=np.linspace(0.1,0.5,0)

y=mean(results)

xlabel('mu')

ylabel('moyenne')

title('moyenne opinion')

​

show()

from pylab import *

abs = np.linspace(0.1,0.5,5)

for i in abs:

    x = i

    y = mean(list)

    plt.scatter(x, y, s=10, c='C0')

plt.xlabel("mu")

plt.ylabel("moyenne")

show()

sys = simulate(verbose=False)

D = dict()

mu = 0.0

D[mu] = next_step(sys)

while mu < 1:

    mu = mu + 0.05

    D[mu] = simulate(sys)

#print(simulate(False)[-1])

​

D2=dict()

c=0.0

D2[c] = mean(simulate(verbose=False)[-1])

#next_step(sys)

while c < 1:

    c = c + 0.05

    D2[c]=mean(simulate(verbose=False)[-1])

    

print(D2)

figure()

L=[]

#x = np.linspace(0,1,21)

all_c = np.linspace(0,1,21)

for k2 in D2.keys():

    x = k2

    L.append(mean(D2[k2]))

    y = mean(D2[k2])

    #scatter(x, y, s=10,c='C0')    

xlabel("c")

ylabel("moyenne")

plot(all_c,L,'r')

show()

​

figure()

L=[]

#x = np.linspace(0,1,21)

all_mu = np.linspace(0,1,21)

for k in D:

    x = k

    L.append(mean(D[k]))

    y = mean(D[k])

    #scatter(x, y, s=10,c='C0')

​

xlabel("mu")

ylabel("moyenne")

plot(all_mu,L,'r')

show()

​

​

​

import math

def variance(results):

    m=mean(results)

    return mean([(x-m)**2 for x in D])

​

v=variance(results)

def ecartype(results):

    return math.sqrt(v)

print("Ecart-type=",ecartype(results))

figure()

L=[]

#x = np.linspace(0,1,21)

all_mu = np.linspace(0,1,21)

for k in D:

    x = k

    L.append(mean(D[k]))

    y = ecartype(D[k])

    #scatter(x, y, s=10,c='C0')

​

xlabel("mu")

ylabel("moyenne")

plot(all_mu,L,'r')

show()

​

figure()

L=[]

#x = np.linspace(0,1,21)

all_c = np.linspace(0,1,21)

for k2 in D2.keys():

    x = k2

    L.append(mean(D2[k2]))

    #scatter(x, y, s=10,c='C0')    

xlabel("c")

ylabel("moyenne")

plot(all_c,L,'r')

show()

​

​

​

